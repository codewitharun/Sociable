import {SafeAreaView, StyleSheet, Text, View} from 'react-native';
import React, {useEffect} from 'react';
import io from 'socket.io-client';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import PushNotification, {Importance} from 'react-native-push-notification';
const Notify = () => {
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);

  const startLocalStream = async () => {
    console.log('Start Local Stream');
    if (!localStream) {
      try {
        const stream = await mediaDevices.getUserMedia({video: true});
        setLocalStream(stream);
      } catch (e) {
        console.error('Error starting local stream:', e);
      }
    }
  };

  const stopLocalStream = () => {
    console.log('Stop Local Stream');
    if (localStream) {
      localStream.release();
      setLocalStream(null);
    }
  };

    // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
    invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

    /* iOS only properties */
    category: '', // (optional) default: empty string
    subtitle: 'My Notification Subtitle', // (optional) smaller title below notification title

    /* iOS and Android properties */
    id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    title: 'Welcome', // (optional)
    message: 'Welcome to  Sociable', // (required)
    picture: 'https://www.example.tld/picture.jpg', // (optional) Display an picture with the notification, alias of `bigPictureUrl` for Android. default: undefined
    userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
    playSound: false, // (optional) default: true
    soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    allowWhileIdle: true,
  });
  PushNotification.popInitialNotification(notification => {
    console.log('Initial Notification', notification);
  });
  const socket = io('https://sociable-xisn.onrender.com/api/chat/webrtc');

  PushNotification.createChannel(
    {
      channelId: 'default', // (required)
      channelName: 'Welcome Note', // (required)
      channelDescription: 'When User Login to the app', // (optional) default: undefined.
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
      importance: Importance.HIGH, // (optional) default: Importance.HIGH. Int value of the Android notification importance
      vibrate: true, // (optional) default: true. Creates the default vibration pattern if true.
    },
    created => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
  );
  PushNotification.getChannels(created =>
    console.log(`channel found '${created}'`),
  );
  useEffect(() => {
    console.log(socket);
    console.log('useEffect working now');
    // Listening for the 'connect' event
    socket.on('connect', () => {
      console.log('Connected to server');
    });

    // Listening for a custom event 'message'
    socket.on('message', data => {
      console.log('Received a message:', data);
    });

    // Error event listener
    socket.on('error', error => {
      console.log('Socket error:', error);
      // Handle the error here
    });

    // Clean up event listeners when the component is unmounted
    return () => {
      socket.off('connect');
      socket.off('message');
      socket.off('error');
    };
  }, []);

  return (
    <SafeAreaView>
      <View>
        <Text>Notification</Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#C0C0C0',
  },
  localStream: {
    flex: 1,
  },
  remoteStream: {
    flex: 1,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-evenly',
    paddingVertical: 20,
  },
});

export default Notify;
